//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "dish_flavor")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub dish_id: i64,
    pub name: Option<String>,
    pub value: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::dish::Entity",
        from = "Column::DishId",
        to = "super::dish::Column::Id"
    )]
    Dish,
}

impl Related<super::dish::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Dish.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
