//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::{
    ActiveValue, entity::prelude::*, prelude::async_trait::async_trait, sqlx::types::chrono,
};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub openid: Option<String>,
    pub name: Option<String>,
    pub phone: Option<String>,
    pub sex: Option<String>,
    pub id_number: Option<String>,
    pub avatar: Option<String>,
    pub create_time: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(mut self, _db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        if insert {
            self.create_time = ActiveValue::Set(Some(chrono::Utc::now().naive_utc()));
        }
        Ok(self)
    }
}
