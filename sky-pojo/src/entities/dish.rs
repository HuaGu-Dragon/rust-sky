//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::{
    ActiveValue, entity::prelude::*, prelude::async_trait::async_trait, sqlx::types::chrono,
};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "dish")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    #[sea_orm(unique)]
    pub name: String,
    pub category_id: i64,
    #[sea_orm(column_type = "Decimal(Some((10, 2)))", nullable)]
    pub price: Option<Decimal>,
    pub image: Option<String>,
    pub description: Option<String>,
    pub status: Option<i32>,
    pub create_time: Option<DateTime>,
    pub update_time: Option<DateTime>,
    pub create_user: Option<i64>,
    pub update_user: Option<i64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::category::Entity",
        from = "Column::CategoryId",
        to = "super::category::Column::Id"
    )]
    Category,
    #[sea_orm(
        has_many = "super::dish_flavor::Entity",
        from = "Column::Id",
        to = "super::dish_flavor::Column::DishId"
    )]
    Flavors,
}

impl Related<super::category::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Category.def()
    }
}

impl Related<super::dish_flavor::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Flavors.def()
    }
}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(mut self, _db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        if insert {
            self.create_time = ActiveValue::Set(Some(chrono::Utc::now().naive_utc()));
            self.update_time = ActiveValue::Set(Some(chrono::Utc::now().naive_utc()));
        } else {
            self.update_time = ActiveValue::Set(Some(chrono::Utc::now().naive_utc()));
        }
        Ok(self)
    }
}
